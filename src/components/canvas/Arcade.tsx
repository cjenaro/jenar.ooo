/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { Html, useGLTF } from '@react-three/drei'
import { folder, useControls } from 'leva'
import RoundButton from './RoundButton'
import Joystick from './Joystick'
import Switches from './Switches'
import { useGSAP } from '@gsap/react'
import gsap from 'gsap'
import { extend, Euler } from '@react-three/fiber'
import * as THREE from 'three'

import { geometry } from 'maath'

extend({ RoundedPlaneGeometry: geometry.RoundedPlaneGeometry })

function toEuler({ x, y, z }: { x: number; y: number; z: number }): Euler {
  return [x, y, z]
}

function toVec3({ x, y, z }: { x: number; y: number; z: number }): THREE.Vector3 {
  return new THREE.Vector3(x, y, z)
}

export function Arcade(props) {
  //@ts-ignore
  const { nodes, materials } = useGLTF('/arcade.glb')

  const {
    screenSize,
    bPosition,
    aPosition,
    boxPosition,
    cPosition,
    dPosition,
    ePosition,
    fPosition,
    screenPosition,
    screenRotation,
  } = useControls('buttons', {
    box: folder({
      boxPosition: [-0.307, -0.296, 0.115],
    }),
    roundButtons: folder({
      aPosition: { step: 0.01, value: [0.418, -0.675, 0.572] },
      bPosition: { step: 0.01, value: [0.267, -0.675, 0.572] },
      cPosition: { step: 0.01, value: [0.115, -0.675, 0.572] },
      dPosition: { step: 0.01, value: [0.115, -0.637, 0.403] },
      ePosition: { step: 0.01, value: [0.267, -0.637, 0.403] },
      fPosition: { step: 0.01, value: [0.418, -0.637, 0.403] },
    }),
    rectAreaLight: folder({
      position: [-0.1, 0.5, 0],
      intensity: 50,
      color: '#ff618a',
      size: [2, 1],
    }),
    Screen: folder({
      screenPosition: { value: { x: 0, y: -0.01, z: 0 }, x: { step: 0.1 }, y: { step: 0.01 } },
      screenRotation: { value: { x: 0.14, y: 0, z: 0 }, x: { step: 0.1 }, y: { step: 0.01 } },
      screenSize: { value: { w: 800, h: 450 } },
    }),
    Plane: folder({
      planeRotation: [0.15, 0, 0],
      planeSize: { value: { h: 1.2, w: 1.82 }, step: 0.01 },
      planeBorderRadius: { value: 0.14, step: 0.1 },
    }),
  })

  const roundButtonBodyMaterial = materials['1']
  const roundButtonTipMaterial = materials['3']

  const arcadeRef = useRef(null)
  useGSAP(() => {
    if (arcadeRef.current) {
      gsap.to(arcadeRef.current.position, {
        x: 0.5,
        duration: 1,
      })
    }
  })

  return (
    <group {...props} dispose={null} ref={arcadeRef}>
      <group position={[-0.307, -0.296, 0.115]}>
        <mesh castShadow receiveShadow geometry={nodes.Cube001.geometry} material={materials['1']} />
        <mesh castShadow receiveShadow geometry={nodes.Cube001_1.geometry} material={materials['2']} />
        <mesh castShadow receiveShadow geometry={nodes.Cube001_2.geometry} material={materials['3']} />
        <mesh castShadow receiveShadow geometry={nodes.Cube001_3.geometry} material={materials['4']} />
      </group>

      <mesh
        castShadow
        receiveShadow
        geometry={nodes.parent.geometry}
        material={materials['3']}
        position={[-0.4, 0.286, -0.06]}
      >
        <Html
          position={toVec3(screenPosition)} // Position of the iframe relative to the mesh
          transform
          rotation={toEuler(screenRotation)}
          occlude
          distanceFactor={1}
        >
          <iframe
            src='/game'
            style={{
              width: '760px',
              height: '450px',
              border: 'none',
              transform: 'scale(1)',
              transformOrigin: 'center center',
              borderRadius: '52px',
            }}
          />
        </Html>
      </mesh>
      <group name='roundButtons'>
        <RoundButton
          position={aPosition}
          bodyGeometry={nodes.Cube002.geometry}
          bodyMaterial={roundButtonBodyMaterial}
          tipGeometry={nodes.Cube002_1.geometry}
          tipMaterial={roundButtonTipMaterial}
        />
        <RoundButton
          position={bPosition}
          bodyGeometry={nodes.Cube003.geometry}
          bodyMaterial={roundButtonBodyMaterial}
          tipGeometry={nodes.Cube003_1.geometry}
          tipMaterial={roundButtonTipMaterial}
        />
        <RoundButton
          position={cPosition}
          bodyGeometry={nodes.Cube004.geometry}
          bodyMaterial={roundButtonBodyMaterial}
          tipGeometry={nodes.Cube004_1.geometry}
          tipMaterial={roundButtonTipMaterial}
        />
        <RoundButton
          position={dPosition}
          bodyGeometry={nodes.Cube005.geometry}
          bodyMaterial={roundButtonBodyMaterial}
          tipGeometry={nodes.Cube005_1.geometry}
          tipMaterial={roundButtonTipMaterial}
        />
        <RoundButton
          position={ePosition}
          bodyGeometry={nodes.Cube006.geometry}
          bodyMaterial={roundButtonBodyMaterial}
          tipGeometry={nodes.Cube006_1.geometry}
          tipMaterial={roundButtonTipMaterial}
        />
        <RoundButton
          position={fPosition}
          bodyGeometry={nodes.Cube007.geometry}
          tipGeometry={nodes.Cube007_1.geometry}
          bodyMaterial={roundButtonBodyMaterial}
          tipMaterial={roundButtonTipMaterial}
        />
      </group>
      <Joystick
        material={roundButtonBodyMaterial}
        whiteMaterial={roundButtonTipMaterial}
        stickGeometry={nodes.Cube008.geometry}
        whiteGeometry={nodes.Cube008_1.geometry}
      />
      <Switches material={roundButtonBodyMaterial} geometry={nodes.button006.geometry} />
    </group>
  )
}

useGLTF.preload('/arcade.glb')
